{"version":3,"sources":["useFetch.js","context.js","SearchForm.js","Movies.js","Home.js","SingleMovie.js","App.js","index.js"],"names":["useFetch","urlParams","useState","loading","setLoading","data","setData","show","msg","error","setError","fetchMovies","url","a","fetch","response","json","Response","Search","Error","useEffect","AppContext","React","createContext","AppProvider","children","query","setQuery","movies","Provider","value","useGlobalContext","useContext","SearchForm","className","onSubmit","e","preventDefault","type","onChange","target","Movies","map","movie","idx","Title","Year","Poster","imdbID","Type","to","src","alt","Home","SingleMovie","id","useParams","poster","title","plot","Plot","year","App","exact","path","ReactDOM","render","StrictMode","document","getElementById","require","config"],"mappings":"qNAiCeA,EA5BE,SAACC,GAAc,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAEHF,mBAAS,MAFN,mBAEpBG,EAFoB,KAEdC,EAFc,OAGDJ,mBAAS,CAACK,MAAM,EAAOC,IAAK,KAH3B,mBAGpBC,EAHoB,KAGbC,EAHa,KAKrBC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBT,GAAW,GADK,kBAGWU,MAAMF,GAHjB,cAGNG,EAHM,gBAIOA,EAASC,OAJhB,OAKU,UADhBX,EAJM,QAKHY,UACPX,EAAQD,EAAKa,QAAUb,GAEvBK,EAAS,CAAEH,MAAM,EAAOC,IAAK,MAE7BE,EAAS,CAAEH,MAAM,EAAMC,IAAKH,EAAKc,QAEnCf,GAAW,GAZC,4GAAH,sDAqBjB,OALAgB,qBAAW,WAERT,EAAY,GAAD,OA1BA,0CA0BA,OAAmBV,MAC9B,CAACA,IAEG,CAACE,UAASE,OAAMI,U,OC3BrBY,EAAaC,IAAMC,gBAEnBC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRvB,mBAAS,aADD,mBAC3BwB,EAD2B,KACpBC,EADoB,OAEK3B,EAAS,MAAD,OAAO0B,IAA/CvB,EAF2B,EAE3BA,QAAeyB,EAFY,EAElBvB,KAAcI,EAFI,EAEJA,MAEhC,OACE,cAACY,EAAWQ,SAAZ,CAAqBC,MAAO,CAAC3B,UAASM,QAAOmB,SAAQF,QAAOC,YAA5D,SACKF,KAKIM,EAAmB,WAC9B,OAAOC,qBAAWX,ICALY,EAhBI,WAAO,IAAD,EACYF,IAA3BL,EADe,EACfA,MAAOC,EADQ,EACRA,SAAUlB,EADF,EACEA,MACrB,OACE,uBAAMyB,UAAU,cAAcC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAAjD,UACA,+CACA,uBACIC,KAAK,QACLJ,UAAU,aACVJ,MAAOJ,EACPa,SAAU,SAACH,GAAD,OAAOT,EAASS,EAAEI,OAAOV,UAEtCrB,EAAMF,MAAQ,qBAAK2B,UAAU,QAAf,SAAwBzB,EAAMD,U,OCsBtCiC,EA7BA,WAAO,IAAD,EACSV,IAAnBH,EADU,EACVA,OAEP,OAHiB,EACFzB,QAIP,wBAAQ+B,UAAU,UAAlB,2BAKJ,yBAASA,UAAU,SAAnB,SACKN,EAAOc,KAAI,SAACC,EAAOC,GAAQ,IACjBC,EAAoCF,EAApCE,MAAMC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,OAAcC,GAAUL,EAAhBM,KAAgBN,EAAVK,QACjC,OACI,cAAC,IAAD,CAAME,GAAE,kBAAaF,GAAoBd,UAAU,QAAnD,SACA,oCACA,qBAAKiB,IAAgB,QAAXJ,EAlB5B,+EAkBqDA,EAAQK,IAAKP,IAChD,sBAAKX,UAAU,aAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBW,IACvB,4BAAIC,WAL4BF,SCRzCS,EATF,WACX,OACI,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QC8BOC,EAhCK,WAAO,IACfC,EAAOC,cAAPD,GADc,EAEkBvD,EAAS,MAAD,OAAOuD,IAA/CpD,EAFc,EAEdA,QAASM,EAFK,EAELA,MAAakC,EAFR,EAEEtC,KACxB,GAAIF,EACA,OAAO,qBAAK+B,UAAU,YAExB,GAAIzB,EAAMF,KACR,OACE,sBAAK2B,UAAU,aAAf,UACE,6BAAKzB,EAAMD,MACX,cAAC,IAAD,CAAM0C,GAAG,IAAIhB,UAAU,MAAvB,+BAVc,IAgBJuB,EAAiDd,EAAzDI,OAAuBW,EAAkCf,EAAzCE,MAAoBc,EAAqBhB,EAA3BiB,KAAkBC,EAASlB,EAAfG,KAClD,OACE,0BAASZ,UAAU,eAAnB,UACE,qBAAKiB,IAAKM,EAAQL,IAAKM,IACvB,sBAAKxB,UAAU,oBAAf,UACE,6BAAKwB,IACL,4BAAIC,IACJ,6BAAKE,IACL,cAAC,IAAD,CAAMX,GAAG,IAAIhB,UAAU,MAAvB,mCCZG4B,MAXf,WAAgB,IAAD,EACb,OACE,eAAC,IAAD,WACA,cAAC,KAAD,GAAOC,OAAK,EAACC,KAAK,KAAlB,mDACE,cAAC,EAAD,KADF,IAGA,cAAC,IAAD,CAAOA,KAAK,cAAcvC,SAAU,cAAC,EAAD,UCHxCwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,YAMRC,SAASC,eAAe,SAO1BC,EAAQ,IAAUC,W","file":"static/js/main.a42bfadf.chunk.js","sourcesContent":["//import { response } from 'express';\nimport React, {useEffect, useState} from 'react';\nconst API_ENDPOINT = `https://www.omdbapi.com/?apikey=mohawk`\n//${process.env.MOVIE_API_KEY}\n\nconst useFetch = (urlParams) =>{\n    const [loading, setLoading] = useState(true)\n    const [data, setData] = useState(null)\n    const [error, setError] = useState({show: false, msg: \"\"})\n\n    const fetchMovies = async (url) => {\n        setLoading(true)\n        try {\n            const response = await fetch(url)\n            const data = await response.json()\n            if (data.Response === 'True') {\n              setData(data.Search || data)\n      \n              setError({ show: false, msg: '' })\n            } else {\n              setError({ show: true, msg: data.Error })\n            }\n            setLoading(false)\n          } catch (error) {\n          }\n    }\n    useEffect (() =>{\n       \n       fetchMovies(`${API_ENDPOINT}${urlParams}`)\n    }, [urlParams])\n\n    return {loading, data, error}\n}\nexport default useFetch","import React, { useState, useContext, useEffect } from 'react'\nimport useFetch from './useFetch'\n// make sure to use https\nexport const API_ENDPOINT = `https://www.omdbapi.com/?apikey=mohawk`\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n    const [query, setQuery] = useState('godfather')\n    const {loading, data: movies, error} = useFetch(`&s=${query}`)\n\n  return (\n    <AppContext.Provider value={{loading, error, movies, query, setQuery}}>\n        {children}\n    </AppContext.Provider>\n  );\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }","import React from 'react'\nimport { useGlobalContext } from './context'\nconst SearchForm = () => {\n  const { query, setQuery, error } = useGlobalContext()\n      return(\n        <form className='search-form' onSubmit={(e) => e.preventDefault()}>\n        <h2>search movies</h2>\n        <input\n            type='text '\n            className='form-input'\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n        />\n        {error.show && <div className='error'>{error.msg}</div>}\n        </form>\n      );\n}\n\nexport default SearchForm","import React from 'react'\nimport { useGlobalContext } from './context'\nimport { Link } from 'react-router-dom'\nconst url =\n  'https://upload.wikimedia.org/wikipedia/commons/f/fc/No_picture_available.png'\n\nconst Movies = () => {\n    const {movies, loading} = useGlobalContext()\n\n    if(loading){\n        return (\n            <secion className=\"loading\">\n]            </secion>\n        );\n    }\n    return (\n        <section className='movies'>\n            {movies.map((movie, idx) =>{\n                const {Title,Year, Poster, Type, imdbID} = movie\n                return(\n                    <Link to={`/movies/${imdbID}`} key={idx} className='movie'>\n                    <article>\n                    <img src={Poster === 'N/A' ? url : Poster} alt={Title} />\n                    <div className='movie-info'>\n                        <h4 className='title'>{Title}</h4>\n                        <p>{Year}</p>\n                    </div>\n                    </article>\n                </Link>\n                );\n            })}\n        </section>\n    );\n}\n\nexport default Movies","import React from 'react'\nimport Form from './SearchForm'\nimport Movies from './Movies'\nconst Home = () => {\n  return (\n      <>\n        <Form/>\n        <Movies/>\n     </>\n  );\n}\n\nexport default Home","import React, { useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { API_ENDPOINT } from './context'\nimport useFetch from './useFetch'\n\nconst SingleMovie = () => {\n    const { id } = useParams()\n    const { loading, error, data: movie } = useFetch(`&i=${id}`)\n    if (loading) {\n        return <div className='loading'></div>\n      }\n      if (error.show) {\n        return (\n          <div className='page-error'>\n            <h1>{error.msg}</h1>\n            <Link to='/' className='btn'>\n              back to movies\n            </Link>\n          </div>\n        )\n      }\n      const { Poster: poster, Title: title, Plot: plot, Year: year } = movie\n      return (\n        <section className='single-movie'>\n          <img src={poster} alt={title} />\n          <div className='single-movie-info'>\n            <h2>{title}</h2>\n            <p>{plot}</p>\n            <h4>{year}</h4>\n            <Link to='/' className='btn'>\n              back to movies\n            </Link>\n          </div>\n        </section>\n      )\n}\n\nexport default SingleMovie\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Home from './Home'\nimport Movie from './SingleMovie'\n\nfunction App() {\n  return (\n    <Switch>\n    <Route exact path='/' exact>\n      <Home />\n    </Route>\n    <Route path='/movies/:id' children={<Movie />} />\n  </Switch>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AppProvider } from './context'\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom'\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <HashRouter>\n        <Router>\n          <App />\n        </Router>\n      </HashRouter>\n    </AppProvider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\nrequire('dotenv').config()\n"],"sourceRoot":""}